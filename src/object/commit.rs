use ordered_multimap::ListOrderedMultimap;

use crate::{
    error::Error,
    repo::GitRepository,
    index::Index,
    branch::branch_update_current,
};

use super::{tree_create_from_index, object_write, ObjectHash, GitObject, object_find};

pub struct Commit {
    pub map: ListOrderedMultimap<String, String>,
}

impl Commit {
    pub fn deserialize(data: Vec<u8>) -> Result<Commit, Error> {
        let data = match String::from_utf8(data) {
            Ok(data) => data,
            Err(_) => return Err(Error::BadKVLMFormat),
        };
        let map = crate::kvlm::kvlm_parse(&data)?;

        Ok(Commit {
            map,
        })
    }

    pub fn serialize(&self) -> Vec<u8> {
        crate::kvlm::kvlm_serialize(&self.map).into_bytes()
    }

    pub fn serialize_into(self) -> Vec<u8> {
        self.serialize()
    }
}

pub fn commit_create(index: &Index, repo: &GitRepository) -> Result<ObjectHash, Error> {
    let tree_hash = tree_create_from_index(index, repo)?;
    let parent_hash = object_find(repo, "HEAD")?;

    let mut map = ListOrderedMultimap::new();
    map.insert("tree".to_owned(), tree_hash.to_string());
    map.insert("parent".to_owned(), parent_hash.to_string());
    map.insert("author".to_owned(), "wyag <wyag@example.com>".to_owned());
    map.insert("committer".to_owned(), "wyag <wyag@example.com>".to_owned());
    map.insert("".to_owned(), "A commit generated by wyag, which won't let you customize your message.".to_owned());

    let commit = GitObject::Commit(Commit {
        map
    });
    let commit_hash = object_write(repo, &commit)?;

    branch_update_current(repo, &commit_hash)?;

    Ok(commit_hash)
}
